if !empty($BOXEN_HOME)
  let powerline_home = $BOXEN_HOME . "/homebrew/lib/python2.7/site-packages/powerline"
  if isdirectory(powerline_home)
    execute("set rtp+=" . powerline_home . "/bindings/vim")
  endif
endif

if has("gui_running")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    set guifont=Meslo\ LG\ S\ for\ Powerline
  endif
endif

" " " is the <Leader> character
let mapleader=" "

" Change the current working directory to the directory that the current file you are editing is in.
map <Leader>cd :cd %:p:h <CR>

" Remove trailing whitespace
nnoremap <Leader>w :%s/\s\+$//e<CR>

map <Leader>n :NERDTreeToggle<CR>
" Opens an edit command with the path of the currently edited file filled in
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>s :split <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>v :vsplit <C-R>=expand("%:p:h") . "/" <CR>

" Insert the current directory into a command
cmap <C-P> <C-R>=expand("%:p:h") . "/"

" ---------------------------------------------------------------------------
"  " Configure our tab behavior
"  "
"  ---------------------------------------------------------------------------

" map <C-w> :tabclose<CR>
nnoremap <silent> <C-n> :tabnext<CR>
nnoremap <silent> <C-p> :tabprevious<CR>
nnoremap <silent> <C-t> :tabnew<CR>

" Window navigation
nmap <C-J> <C-W><C-J>
nmap <C-K> <C-W><C-K>
nmap <C-L> <C-W><C-L>
nmap <C-H> <C-W><C-H>
nmap tt <C-W>

" Rotate the windows when in position x |x|_|
"                                       | | |
nmap <S-R> <C-w>K<C-W>r<C-W>k<C-W>H

" Mappings
map :Nohl :nohlsearch
" no ex mode
map Q q
inoremap kj <Esc>
inoremap jk <Esc>

" toggle spell check
:map <F5> :setlocal spell! spelllang=en_us<CR>
:imap <F5> <C-o>:setlocal spell! spelllang=en_us<CR>

" disable cursor keys in normal mode
map <Left>  :echo "'You suck at Vim' - W. Mernagh"<cr>
map <Right> :echo "'You suck at Vim' - W. Mernagh"<cr>
map <Up>    :echo "'You suck at Vim' - W. Mernagh"<cr>
map <Down>  :echo "'You suck at Vim' - W. Mernagh"<cr>

" Alternate file
nnoremap <leader><leader> :A<CR>
set number
set guifont=Monaco:h14
set expandtab
set tabstop=2
set shiftwidth=2
set gfn=Monaco:h14
set nofoldenable
set number
set numberwidth=5
set ruler
set nowrap
set backspace=indent,eol,start
set autoindent
set copyindent
set showmatch
set ignorecase
set smartcase
set incsearch
set hlsearch
set showcmd
set scrolloff=5
set nojoinspaces
set cursorline
set mat=5
set guioptions=egmrt

call pathogen#infect()
syntax enable
filetype plugin indent on

" map tab to autocomplete
imap <Tab> <C-P>

" Completion {{{
" :set wildmenu enables a menu at the bottom of the vim/gvim window.
set wildmenu
" list:longest    - When > 1 match, list all matches and
"                   complete till longest common string.
" full            - enables you to tab through the remaining completions
set wildmode=list:longest,full
set wildignore+=*.pyc,*.zip,*.gz,*.bz,*.tar,*.jpg,*.png,*.gif,*.avi,*.wmv,*.ogg,*.mp3,*.mov
" completeopt values (default: "menu,preview")
" menu:    use popup menu to show possible completion
" menuone: Use the popup menu also when there is only one match.
"          Useful when there is additional information about the match,
"          e.g., what file it comes from.
" longest: only tab-completes up to the common elements, if any: " allows
"          you to hit tab, type to reduce options, hit tab to complete.
" preview: Show extra information about the currently selected completion in
"          the preview window. Only works in combination with "menu" or
"          "menuone".
set completeopt=menu,menuone,longest,preview
" end completion }}}
colorscheme vividchalk
